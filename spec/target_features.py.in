#!/user/bin/env python
'''
    target_features
    ---------------

    Detect target features for a given architecture.
'''

import collections
import json
import os
import re
import stat
import subprocess

bin_dir = ^BIN^

def find_executable(executables, name):
    '''Find an executable if available.'''

    devnull = subprocess.DEVNULL
    for exe in executables:
        if exe.startswith('/') and os.path.exists(exe):
            return exe
        elif subprocess.call(
            ['which', exe],
            stderr=devnull,
            stdout=devnull,
        ) == 0:
            return exe
    raise ValueError(f'Unable to find {name}.')

def find_linker():
    '''Get the executable for the linker.'''

    linkers = ['ld', 'ld.bfd', 'ld.gold']
    linkers += [f'{bin_dir}/{i}' for i in linkers]
    return find_executable(linkers, 'linker')

def find_cc():
    '''Find the C compiler.'''

    compilers = ['cc', 'gcc', 'clang']
    compilers += [f'{bin_dir}/{i}' for i in compilers]
    return find_executable(compilers, 'cc')

def find_cxx():
    '''Find the C++ compiler.'''

    compilers = ['c++', 'g++', 'clang++']
    compilers += [f'{bin_dir}/{i}' for i in compilers]
    return find_executable(compilers, 'c++')

def linker_is_gnu(linker):
    '''Determine if the linker flavor is GNU.'''

    with subprocess.Popen(
        [linker, '--version'],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT
    ) as process:
        code = process.wait()
        if code == 0:
            stdout = process.stdout.read().decode('utf-8')
            if 'GNU' in stdout:
                return True
            else:
                return False
    raise ValueError('Unable to call version to linker.')

def parse_defines(cc):
    '''Dump and parse the GCC compiler defines.'''

    with subprocess.Popen(
        f'{cc} -dM -E - < /dev/null',
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT
    ) as process:
        code = process.wait()
        assert code == 0
        stdout = process.stdout.read().decode('utf-8')

    lines = stdout.splitlines()
    regex = re.compile(r'^#define (\S+) ?(.*)$')
    data = [regex.match(i).groups() for i in lines]
    return {k: v for k, v in data}

def eh_frame_header(linker, cxx):
    '''Determine if the linker supports --eh-frame-hdr.'''

    # Doesn't need `-nostartfiles`, since by default we
    # don't provide crt0.
    devnull = subprocess.DEVNULL
    with open('main.cc', 'w') as file:
        file.write('int main() { return 0; }')
    subprocess.check_call(
        [cxx, '-c', 'main.cc', '-o', 'main.o'],
        stderr=devnull,
        stdout=devnull,
    )
    code = subprocess.call(
        [linker, 'main.o', '-o', 'main', '--eh-frame-hdr'],
        stderr=devnull,
        stdout=devnull,
    )
    os.unlink('main.cc')
    os.unlink('main.o')
    try:
        os.unlink('main')
    except FileNotFoundError:
        pass
    return code == 0

def alignof(c_type, cc):
    '''Calculate the alignment of a given type.'''

    # We use the hack to get the alignment:
    #   char (*alignment)[alignof({type})] = 1;
    with open('main.c', 'w') as file:
        file.write('#include <stdalign.h>\n')
        file.write('#include <stdint.h>\n')
        file.write(f'char (*alignment)[alignof({c_type})] = 1.0;\n')
        file.write('int main() { return 0; }\n')

    with subprocess.Popen(
        [cc, 'main.c', '-o', 'main', '-std=c11'],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT
    ) as process:
        stdout = process.stdout.read().decode('utf-8')

    # Delete file after getting output.
    os.unlink('main.c')
    try:
        os.unlink('main')
    except FileNotFoundError:
        pass

    # Match the type size.
    capture = r'\[(\d+)\]'
    quote = r'[\'‘’]'
    floats = r'(?:double|float|long double)'
    regexes = [
        re.compile(fr'{capture}{quote} with an expression of type'),
        re.compile(fr'{capture}{quote} with an expression of incompatible type'),
        re.compile(fr'{capture}{quote} from {quote}{floats}{quote} makes pointer'),
        re.compile(fr'{capture}{quote} using type {quote}{floats}{quote}'),
    ]
    for regex in regexes:
        match = regex.search(stdout)
        if match is not None:
            return match.group(1)

    raise ValueError(stdout)

def target_endian(defines):
    '''Get if the architecture is little-endian'''

    byte_order = defines['__BYTE_ORDER__']
    if byte_order == '__ORDER_LITTLE_ENDIAN__':
        return 'little'
    elif byte_order == '__ORDER_BIG_ENDIAN__':
        return 'big'
    elif byte_order == '__ORDER_PDP_ENDIAN__':
        return 'pdp'
    raise ValueError('Unknown byte order.')

def target_pointer(defines, cc):
    '''Get the size and alignment of a pointer.'''

    size = defines['__SIZEOF_POINTER__']
    align = alignof('char*', cc)
    return {
        'size': size,
        'align': align,
    }

def char_is_signed(cc):
    '''Determine if a character is signed.'''

    devnull = subprocess.DEVNULL
    with open('main.c', 'w') as file:
        file.write('#include <limits.h>\n')
        file.write('#if CHAR_MIN < 0\n')
        file.write('#error signed char\n')
        file.write('#endif\n')
        file.write('int main() { return 0; }\n')
    code = subprocess.call(
        [cc, 'main.c', '-o', 'main'],
        stdout=devnull,
        stderr=devnull,
    )
    os.unlink('main.c')
    try:
        os.unlink('main')
    except FileNotFoundError:
        pass
    return code != 0

def target_c_int(defines, cc):
    '''Get the size and alignment of `int`.'''

    size = defines['__SIZEOF_INT__']
    align = alignof('int', cc)
    return {
        'size': size,
        'align': align,
    }

def pic(defines):
    '''Determine the flag to support position-independent code.'''

    value = defines.get('__PIC__', '0')
    if value == '1':
        return '-fpic'
    if value == '2':
        return '-fPIC'
    return None

def pie(defines):
    '''Determine the flag to support position-independent executables.'''

    value = defines.get('__PIE__', '0')
    if value == '1':
        return '-fpie'
    if value == '2':
        return '-fPIE'
    return None

def data_model(data):
    '''Determine the correct data model, such as ilp32, for the toolchain.'''

    try:
        c_short = data['target-c-short']['size']
        c_int = data['target-c-int']['size']
        c_long = data['target-c-long']['size']
        c_long_long = data['target-c-long-long']['size']
        c_pointer = data['target-pointer']['size']

        # (short, int, long, long long, pointer)
        # short is at least 16 bits
        # long is at least 32 bits
        # long long is at least 64 bits
        models = {
            ('2', '2', '4', '8', '2'): 'sip2',
            ('2', '2', '4', '8', '4'): 'lp32',
            ('2', '4', '4', '8', '4'): 'ilp32',
            ('2', '4', '4', '8', '8'): 'llp64',
            ('2', '4', '8', '8', '8'): 'lp64',
            ('2', '8', '8', '8', '8'): 'ilp64',
            ('8', '8', '8', '8', '8'): 'silp64',
        }
        return models[(c_short, c_int, c_long, c_long_long, c_pointer)]
    except KeyError:
        return 'unknown'

def add_exec(path):
    '''Give a file executable permissions.'''

    flags = stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH
    st = os.stat(path)
    os.chmod(path, st.st_mode | flags)

def add_specifications(linker, cc, cxx):
    '''Add scripts to display the target specifications.'''

    defines = parse_defines(cc)
    data = {
        'arch': os.environ['ARCH'],
        'os': os.environ['OS'],
        'flags': os.environ['FLAGS'],
        'optional_flags': os.environ['OPTIONAL_FLAGS'],
        'eh-frame-header': eh_frame_header(linker, cxx),
        'linker-is-gnu': linker_is_gnu(linker),
        'target-endian': target_endian(defines),
        'target-pointer': target_pointer(defines, cc),
        'target-c-int': target_c_int(defines, cc),
        'pic': pic(defines),
        'pie': pie(defines),
        'target-c-char': {
            # Both the size and alignment are guaranteed
            # by the standard to be 1 in both C and C++,
            # although this is redundant, it's just for
            # consistency.
            'size': '1',
            'align': '1',
            'signed': char_is_signed(cc)
        },
    }
    c_types = {
        'size_t': 'size_t',
        'wchar_t': 'wchar_t',
        'float': 'float',
        'double': 'double',
        'long_double': 'long double',
        'float80': '__float80',
        'float128': '__float128',
        'short': 'short',
        'long': 'long',
        'long_long': 'long long',
        'int128': '__int128',
    }
    for label, c_type in c_types.items():
        define = f'__SIZEOF_{label.upper()}__'
        if define in defines:
            key = f'target-c-{label.replace("_", "-")}'
            data[key] = {
                'size': defines[define],
                'align': alignof(c_type, cc)
            }

    # Determine the appropriate data model.
    data['data-model'] = data_model(data)

    # Create a filtered view of our data.
    data_filtered = {
        'arch': data['arch'],
        'os': data['os'],
        'eh-frame-header': data['eh-frame-header'],
        'linker-is-gnu': data['linker-is-gnu'],
        'target-endian': data['target-endian'],
        'pic': data['pic'],
        'pie': data['pie'],
        'char-is-signed': data['target-c-char']['signed'],
        'data-model': data['data-model'],
    }

    return data_filtered, data

def missing_stdlib(cxx):
    '''Check if by default the library fails to link.'''

    def unlink():
        os.unlink('main.cc')
        try:
            os.unlink('main')
        except FileNotFoundError:
            pass

    # Check to see if the file compiles by default.
    # Need to add a dummy _start routine, since some
    # might say "cannot find entry symbol _start", which
    # is obviously not what we want.
    with open('main.cc', 'w') as file:
        file.write('int main() { return 0; }\n')
        file.write('extern "C" void _start() {}\n')
    with subprocess.Popen(
        [cxx, 'main.cc', '-o', 'main', '-Wl,--fatal-warnings'],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT
    ) as process:
        code = process.wait()
        if code == 0:
            unlink()
            return []
        stdout = process.stdout.read().decode('utf-8')

    # If not, we need to parse the link errors to find the missing libraries.
    unlink()
    regex = re.compile(r'cannot find ([^:]+)(?:: No such file or directory)?')
    return regex.findall(stdout)

def has_startfiles(cxx):
    '''Check if the C-runtime has startfiles.'''

    def unlink():
        os.unlink('main.cc')
        try:
            os.unlink('main')
        except FileNotFoundError:
            pass

    # Make sure we treat all linker warnings as fatal,
    # so we don't use an implicit start, like:
    #   ld: warning: cannot find entry symbol _start; defaulting to 00000000000010dc
    command = [cxx, 'main.cc', '-o', 'main', '-Wl,--fatal-warnings']
    devnull = subprocess.DEVNULL
    with open('main.cc', 'w') as file:
        file.write('int main() { return 0; }\n')
    code = subprocess.call(command, stderr=devnull, stdout=devnull)
    if code == 0:
        # Has startfiles, can short-circuit
        unlink()
        return True

    # Didn't compile , check to see if it works with a dummy
    # `_start` routine, to provide a fake entrypoint.
    # We also provide `-nostartfiles`, since some images
    # have undefined references to other required symbols,
    # such as `__bss_start__`.
    with open('main.cc', 'w') as file:
        file.write('int main() { return 0; }\n')
        file.write('extern "C" void _start() {}\n')
    code = subprocess.call(command + ['-nostartfiles'], stderr=devnull, stdout=devnull)
    unlink()
    if code != 0:
        raise ValueError('Unexpected failure, maybe missing more than `_start`?')
    return False

def has_cxxstdlib(cxx, startfiles):
    '''Check if there is a C++ standard library.'''

    devnull = subprocess.DEVNULL
    with open('main.cc', 'w') as file:
        file.write('#include <algorithm>\n')
        file.write('#include <cstdint>\n')
        file.write('int main() { return 0; }\n')
    command = [cxx, 'main.cc', '-o', 'main']
    if not startfiles:
        command.append('-nostartfiles')
    code = subprocess.call(
        command,
        stderr=devnull,
        stdout=devnull,
    )

    os.unlink('main.cc')
    try:
        os.unlink('main')
    except FileNotFoundError:
        pass
    return code == 0

def check_run(cxx, is_static):
    '''Check if an image successfully runs.'''

    devnull = subprocess.DEVNULL
    with open('main.cc', 'w') as file:
        file.write('#include <iostream>\n')
        file.write('#include <string>\n')
        file.write('int main() {\n')
        file.write('std::string hello = std::string("Hello world!");\n')
        file.write('std::cout << hello << std::endl;\n')
        file.write('}\n')
    command = [cxx, 'main.cc', '-o', 'main']
    if is_static:
        command.append('-static')
    else:
        command.append('-fPIC')
    subprocess.check_call(
        command,
        stderr=devnull,
        stdout=devnull,
    )
    code = subprocess.call(
        [f'{bin_dir}/run', 'main'],
        stderr=devnull,
        stdout=devnull,
    )
    os.unlink('main.cc')
    os.unlink('main')
    return code == 0

def add_warnings(cxx, has_os):
    '''Add any warnings to a JSON image.'''

    warnings = collections.defaultdict(dict)

    # Check if we need `-nostartfiles`, in one
    # of two conditions: there is no crt0, or
    # crt0 does not provide a startup routine.
    #
    # Note: some libraries don't provide crt0 (like AVR),
    # but still have startup routines, and some libraries
    # have different names for crt0. Only search the basepath,
    # and only if the library fails to compile.
    #
    # Option 1:
    #   ld: cannot find crt0.o: No such file or directory
    # Option 2:
    #   ld: lib/crt0.o: in function `_start':
    #   sparc/crt0.S:38: undefined reference to `__stack
    if not has_os:
        missing = missing_stdlib(cxx)
        crt0 = [i for i in missing if os.path.splitext(i)[0] == 'crt0']
        startfiles = True
        if crt0:
            # Don't warn for redundant crt0 checks.
            for value in crt0:
                missing.remove(value)
            startfiles = False
            warnings['crt0'] = True
        if startfiles and not has_startfiles(cxx):
            startfiles = False
            warnings['startfiles'] = True
        if not has_cxxstdlib(cxx, startfiles):
            warnings['c++-stdlib'] = True
        if missing:
            warnings['missing'] = missing

    # Check issues at runtime. This is after any symlinks,
    # so we can check if /opt/bin/run exists.
    if os.path.exists(f'{bin_dir}/run'):
        assert has_os
        if not check_run(cxx, True):
            warnings['qemu']['static'] = True
        if not check_run(cxx, False):
            warnings['qemu']['shared'] = True

    return warnings

def main():
    '''Entry point.'''

    linker = find_linker()
    cc = find_cc()
    cxx = find_cxx()
    has_os = os.environ['OS'] != 'unknown'
    filtered, full = add_specifications(linker, cc, cxx)
    warnings = add_warnings(cxx, has_os)

    # Write out our files.
    if warnings:
        with open(f'{bin_dir}/warnings.json', 'w') as file:
            json.dump(warnings, file)
    target_specs = f'{bin_dir}/target-specs'
    target_specs_full = f'{bin_dir}/target-specs-full'
    with open(f'{target_specs}.json', 'w') as file:
        json.dump(filtered, file)
    with open(f'{target_specs_full}.json', 'w') as file:
        json.dump(full, file)
    with open(target_specs, 'w') as file:
        file.write('#/bin/bash\n')
        file.write(f'cat {target_specs}.json | jq\n')
    with open(target_specs_full, 'w') as file:
        file.write('#/bin/bash\n')
        file.write(f'cat {target_specs_full}.json | jq\n')
    add_exec(target_specs)
    add_exec(target_specs_full)

if __name__ == '__main__':
    main()
